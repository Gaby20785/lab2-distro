// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/cyberday.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CyberDayService_RegistrarProductor_FullMethodName  = "/cyberday.CyberDayService/RegistrarProductor"
	CyberDayService_RegistrarNodo_FullMethodName       = "/cyberday.CyberDayService/RegistrarNodo"
	CyberDayService_RegistrarConsumidor_FullMethodName = "/cyberday.CyberDayService/RegistrarConsumidor"
	CyberDayService_SolicitarInicio_FullMethodName     = "/cyberday.CyberDayService/SolicitarInicio"
	CyberDayService_EnviarOferta_FullMethodName        = "/cyberday.CyberDayService/EnviarOferta"
	CyberDayService_SincronizarEntidad_FullMethodName  = "/cyberday.CyberDayService/SincronizarEntidad"
	CyberDayService_LeerOfertas_FullMethodName         = "/cyberday.CyberDayService/LeerOfertas"
	CyberDayService_ConsultarEstado_FullMethodName     = "/cyberday.CyberDayService/ConsultarEstado"
)

// CyberDayServiceClient is the client API for CyberDayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CyberDayServiceClient interface {
	//Registro de entidades (entidades -> broker)
	RegistrarProductor(ctx context.Context, in *RegistroProductorRequest, opts ...grpc.CallOption) (*RegistroResponse, error)
	RegistrarNodo(ctx context.Context, in *RegistroNodoRequest, opts ...grpc.CallOption) (*RegistroResponse, error)
	RegistrarConsumidor(ctx context.Context, in *RegistroConsumidorRequest, opts ...grpc.CallOption) (*RegistroResponse, error)
	//Inicio de envio de ofertas (nodos -> broker)
	SolicitarInicio(ctx context.Context, in *InicioRequest, opts ...grpc.CallOption) (*InicioResponse, error)
	//Envio de ofertas (consumidor -> broker, broker -> nodo, broker -> consumidor)
	EnviarOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*OfertaResponse, error)
	//Sincronizacion (Nodo -> broker, Consumidores -> broker)
	SincronizarEntidad(ctx context.Context, in *SincronizacionRequest, opts ...grpc.CallOption) (*SincronizacionResponse, error)
	//Lectura de ofertas (broker -> nodos)
	LeerOfertas(ctx context.Context, in *LecturaRequest, opts ...grpc.CallOption) (*LecturaResponse, error)
	//Shutdown (productores -> broker)
	ConsultarEstado(ctx context.Context, in *ConsultarEstadoRequest, opts ...grpc.CallOption) (*ConsultarEstadoResponse, error)
}

type cyberDayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCyberDayServiceClient(cc grpc.ClientConnInterface) CyberDayServiceClient {
	return &cyberDayServiceClient{cc}
}

func (c *cyberDayServiceClient) RegistrarProductor(ctx context.Context, in *RegistroProductorRequest, opts ...grpc.CallOption) (*RegistroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistroResponse)
	err := c.cc.Invoke(ctx, CyberDayService_RegistrarProductor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) RegistrarNodo(ctx context.Context, in *RegistroNodoRequest, opts ...grpc.CallOption) (*RegistroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistroResponse)
	err := c.cc.Invoke(ctx, CyberDayService_RegistrarNodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) RegistrarConsumidor(ctx context.Context, in *RegistroConsumidorRequest, opts ...grpc.CallOption) (*RegistroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistroResponse)
	err := c.cc.Invoke(ctx, CyberDayService_RegistrarConsumidor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) SolicitarInicio(ctx context.Context, in *InicioRequest, opts ...grpc.CallOption) (*InicioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InicioResponse)
	err := c.cc.Invoke(ctx, CyberDayService_SolicitarInicio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) EnviarOferta(ctx context.Context, in *OfertaRequest, opts ...grpc.CallOption) (*OfertaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfertaResponse)
	err := c.cc.Invoke(ctx, CyberDayService_EnviarOferta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) SincronizarEntidad(ctx context.Context, in *SincronizacionRequest, opts ...grpc.CallOption) (*SincronizacionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SincronizacionResponse)
	err := c.cc.Invoke(ctx, CyberDayService_SincronizarEntidad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) LeerOfertas(ctx context.Context, in *LecturaRequest, opts ...grpc.CallOption) (*LecturaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LecturaResponse)
	err := c.cc.Invoke(ctx, CyberDayService_LeerOfertas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberDayServiceClient) ConsultarEstado(ctx context.Context, in *ConsultarEstadoRequest, opts ...grpc.CallOption) (*ConsultarEstadoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsultarEstadoResponse)
	err := c.cc.Invoke(ctx, CyberDayService_ConsultarEstado_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CyberDayServiceServer is the server API for CyberDayService service.
// All implementations must embed UnimplementedCyberDayServiceServer
// for forward compatibility.
type CyberDayServiceServer interface {
	//Registro de entidades (entidades -> broker)
	RegistrarProductor(context.Context, *RegistroProductorRequest) (*RegistroResponse, error)
	RegistrarNodo(context.Context, *RegistroNodoRequest) (*RegistroResponse, error)
	RegistrarConsumidor(context.Context, *RegistroConsumidorRequest) (*RegistroResponse, error)
	//Inicio de envio de ofertas (nodos -> broker)
	SolicitarInicio(context.Context, *InicioRequest) (*InicioResponse, error)
	//Envio de ofertas (consumidor -> broker, broker -> nodo, broker -> consumidor)
	EnviarOferta(context.Context, *OfertaRequest) (*OfertaResponse, error)
	//Sincronizacion (Nodo -> broker, Consumidores -> broker)
	SincronizarEntidad(context.Context, *SincronizacionRequest) (*SincronizacionResponse, error)
	//Lectura de ofertas (broker -> nodos)
	LeerOfertas(context.Context, *LecturaRequest) (*LecturaResponse, error)
	//Shutdown (productores -> broker)
	ConsultarEstado(context.Context, *ConsultarEstadoRequest) (*ConsultarEstadoResponse, error)
	mustEmbedUnimplementedCyberDayServiceServer()
}

// UnimplementedCyberDayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCyberDayServiceServer struct{}

func (UnimplementedCyberDayServiceServer) RegistrarProductor(context.Context, *RegistroProductorRequest) (*RegistroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarProductor not implemented")
}
func (UnimplementedCyberDayServiceServer) RegistrarNodo(context.Context, *RegistroNodoRequest) (*RegistroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarNodo not implemented")
}
func (UnimplementedCyberDayServiceServer) RegistrarConsumidor(context.Context, *RegistroConsumidorRequest) (*RegistroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarConsumidor not implemented")
}
func (UnimplementedCyberDayServiceServer) SolicitarInicio(context.Context, *InicioRequest) (*InicioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarInicio not implemented")
}
func (UnimplementedCyberDayServiceServer) EnviarOferta(context.Context, *OfertaRequest) (*OfertaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarOferta not implemented")
}
func (UnimplementedCyberDayServiceServer) SincronizarEntidad(context.Context, *SincronizacionRequest) (*SincronizacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SincronizarEntidad not implemented")
}
func (UnimplementedCyberDayServiceServer) LeerOfertas(context.Context, *LecturaRequest) (*LecturaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeerOfertas not implemented")
}
func (UnimplementedCyberDayServiceServer) ConsultarEstado(context.Context, *ConsultarEstadoRequest) (*ConsultarEstadoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarEstado not implemented")
}
func (UnimplementedCyberDayServiceServer) mustEmbedUnimplementedCyberDayServiceServer() {}
func (UnimplementedCyberDayServiceServer) testEmbeddedByValue()                         {}

// UnsafeCyberDayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CyberDayServiceServer will
// result in compilation errors.
type UnsafeCyberDayServiceServer interface {
	mustEmbedUnimplementedCyberDayServiceServer()
}

func RegisterCyberDayServiceServer(s grpc.ServiceRegistrar, srv CyberDayServiceServer) {
	// If the following call pancis, it indicates UnimplementedCyberDayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CyberDayService_ServiceDesc, srv)
}

func _CyberDayService_RegistrarProductor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroProductorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).RegistrarProductor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_RegistrarProductor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).RegistrarProductor(ctx, req.(*RegistroProductorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_RegistrarNodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroNodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).RegistrarNodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_RegistrarNodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).RegistrarNodo(ctx, req.(*RegistroNodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_RegistrarConsumidor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroConsumidorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).RegistrarConsumidor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_RegistrarConsumidor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).RegistrarConsumidor(ctx, req.(*RegistroConsumidorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_SolicitarInicio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InicioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).SolicitarInicio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_SolicitarInicio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).SolicitarInicio(ctx, req.(*InicioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_EnviarOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfertaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).EnviarOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_EnviarOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).EnviarOferta(ctx, req.(*OfertaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_SincronizarEntidad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SincronizacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).SincronizarEntidad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_SincronizarEntidad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).SincronizarEntidad(ctx, req.(*SincronizacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_LeerOfertas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LecturaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).LeerOfertas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_LeerOfertas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).LeerOfertas(ctx, req.(*LecturaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyberDayService_ConsultarEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultarEstadoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyberDayServiceServer).ConsultarEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CyberDayService_ConsultarEstado_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyberDayServiceServer).ConsultarEstado(ctx, req.(*ConsultarEstadoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CyberDayService_ServiceDesc is the grpc.ServiceDesc for CyberDayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CyberDayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyberday.CyberDayService",
	HandlerType: (*CyberDayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarProductor",
			Handler:    _CyberDayService_RegistrarProductor_Handler,
		},
		{
			MethodName: "RegistrarNodo",
			Handler:    _CyberDayService_RegistrarNodo_Handler,
		},
		{
			MethodName: "RegistrarConsumidor",
			Handler:    _CyberDayService_RegistrarConsumidor_Handler,
		},
		{
			MethodName: "SolicitarInicio",
			Handler:    _CyberDayService_SolicitarInicio_Handler,
		},
		{
			MethodName: "EnviarOferta",
			Handler:    _CyberDayService_EnviarOferta_Handler,
		},
		{
			MethodName: "SincronizarEntidad",
			Handler:    _CyberDayService_SincronizarEntidad_Handler,
		},
		{
			MethodName: "LeerOfertas",
			Handler:    _CyberDayService_LeerOfertas_Handler,
		},
		{
			MethodName: "ConsultarEstado",
			Handler:    _CyberDayService_ConsultarEstado_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberday.proto",
}
